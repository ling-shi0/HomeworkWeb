<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 	
	<mapper namespace="com.xaut.mapper.UserMapper">
	
	<!-- 通过用户账号查找用户对象 -->
	<select id="findUserByUsername" resultType="User" parameterType="String">
		select * from users where username = #{username} 
	</select>
	
	<!-- 根据用户账号查找其角色 -->
	<select id="findRolesByUsername" resultType="String" parameterType="String">
		select sn
		from role,user_roles,users
		where role.id = user_roles.rid 
			and users.id = user_roles.uid 
			and users.username = #{username}
	</select>
	
	<!-- 根据用户账号查找其权限 -->
	<select id="findPermissionsByUsername" resultType="String" parameterType="String">
		select resource
		from permission,users,user_roles,roles_permissions
		where permission.id = roles_permissions.pid 
			and roles_permissions.rid = user_roles.rid 
			and users.id = user_roles.uid 
			and users.username = #{username}
	</select>
	
	<!-- 根据用户账号删除用户 -->
	<delete id="deleteUser" parameterType="String">
		set SQL_SAFE_UPDATES =0;
		delete
		from users
		where users.username = #{username};
		set SQL_SAFE_UPDATES =1;
    </delete>
    
    <!-- 新增用户 -->
    <insert id="addUser" parameterType="com.xaut.entity.User">
    	insert into users(username,password,flag,salt,locked,updatetime,remark1,remark2)
		select #{userName},#{passWord},#{flag},#{salt},#{locked},#{updateTime},'预留','预留'
		from DUAL
		where not exists(
			select username from users
		    where users.username = #{userName}
		)
    </insert>
    
    <!-- 根据用户账号查用户ID -->
    <select id="findUserIDByUsername" resultType="String" parameterType="String">
    	select users.id
		from users
		where users.username = #{userName};
    </select>
    
    <!-- 根据用户ID为用户增加一个角色 -->
    <insert id="addRoleForUser">
    	insert into user_roles(uid,rid,updatetime)
		select #{user_id},#{role_id},#{updateTime}
		from DUAL
		where not exists(
			select * from user_roles
		    where user_roles.uid = #{user_id} and user_roles.rid = #{role_id}
		)
    </insert>
    
    <!-- 根据用户ID删除用户的一个角色 -->
    <delete id="deteleRoleByUID">
    	delete
		from user_roles
		where user_roles.uid = #{user_id} and user_roles.rid = #{role_id};
    </delete>
    
    <!-- 动态sql更新用户表（注意：基表有些非字符串的不能判断!=''） -->
    <update id="updateUser" parameterType="com.xaut.entity.User">
		update users u
		<set>
			<if test="userName!=null and userName!=''">
				u.username = #{userName},
			</if>
			<if test="passWord!=null and passWord!=''">
				u.password = #{passWord},
			</if>
			<if test="flag!=null and flag!=''">
				u.flag = #{flag},
			</if>
			<if test="salt!=null and salt!=''">
				u.salt = #{salt},
			</if>
			<if test="locked!=null and locked!=''">
				u.locked = #{locked},
			</if>
			<if test="updateTime != null">
				u.updatetime = #{updateTime},
			</if>
		</set>
		where u.username = #{userName};
	</update>
</mapper>